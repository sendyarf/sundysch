<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GOVOET</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        /* --- GLOBAL & TYPOGRAPHY --- */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #ffffff; /* White background */
            color: #111827; /* Near black text */
            min-height: 100vh;
            margin: 0;
            padding: 6rem 0;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 1.5rem;
        }

        /* --- MODERN MATCH CARD STYLES --- */
        .match-card {
            background: #ffffff;
            border: 1px solid #e5e7eb; /* Light gray border */
            border-radius: 0.75rem; /* Slightly smaller radius */
            transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            overflow: hidden;
        }
        .match-card:hover {
            border-color: #111827; /* Black border on hover */
            box-shadow: 0 4px 12px -3px rgba(0,0,0,0.07);
        }
        .match-card-header {
            border-bottom: 1px solid #f3f4f6; /* Very light gray separator */
        }
        .match-card-body {
            padding: 1.5rem;
        }
        .team-indicator {
            width: 6px;
            height: 6px;
            border-radius: 9999px;
            flex-shrink: 0;
        }
        .live-badge {
            background-color: #111827; /* Black background */
            color: #ffffff; /* White text */
            padding: 4px 10px;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            letter-spacing: 0.05em;
        }

        /* --- SERVER BUTTONS & CONTAINER --- */
        .servers-container {
            display: grid;
            grid-template-rows: 0fr;
            transition: grid-template-rows 0.3s ease-in-out;
        }
        .servers-container > div {
            overflow: hidden;
        }
        .servers-container.show {
            grid-template-rows: 1fr;
        }
        .stream-button {
            background-color: #ffffff;
            border: 1px solid #e5e7eb;
            color: #1f2937;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        .stream-button:hover {
            background-color: #111827;
            border-color: #111827;
            color: #ffffff;
        }
        .no-streams {
            color: #6b7280;
            font-style: italic;
        }
        .copy-button {
            background: transparent;
            color: #9ca3af; /* Lighter gray icon */
            border-radius: 6px;
            padding: 0.35rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .copy-button:hover {
            color: #111827; /* Black icon on hover */
        }

        /* --- SKELETON LOADER STYLES --- */
        @keyframes skeleton-pulse { 50% { opacity: 0.6; } }
        .skeleton-card {
            background-color: #ffffff;
            border: 1px solid #e5e7eb;
            border-radius: 0.75rem;
            padding: 1.5rem;
            animation: skeleton-pulse 1.8s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        .skeleton-line {
            background-color: #f3f4f6; /* Lighter skeleton color */
            border-radius: 6px;
        }

        /* --- NAVBAR STYLES --- */
        .navbar {
            position: fixed;
            top: 0;
            width: 100%;
            background: #ffffff;
            border-bottom: 1px solid #e5e7eb;
            z-index: 40;
            min-height: 5rem;
            display: flex;
            align-items: center;
        }
        .navbar .container {
            padding-top: 0;
            padding-bottom: 0;
        }
        .nav-tab {
            display: inline-block;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
            border-radius: 6px;
            font-weight: 500;
            border: none;
            background: transparent;
            text-decoration: none;
            color: #6b7280; /* Gray for inactive tabs */
        }
        .nav-tab.active {
            background: #111827; /* Black */
            color: #ffffff; /* White */
        }
        .nav-tab:not(.active):hover {
            color: #111827; /* Black */
        }
        .nav-icon-button {
            padding: 0.5rem;
            border-radius: 9999px;
            color: #6b7280;
            transition: all 0.2s ease;
        }
        .nav-icon-button:hover {
            color: #111827;
            background-color: #f3f4f6;
        }


        /* --- SEARCH & OTHER STYLES --- */
        .search-container {
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            background: #ffffff;
            padding: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            z-index: 38;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: opacity 0.3s ease, transform 0.3s ease, visibility 0.3s ease;
        }
        .search-container.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }
        .search-input {
            width: 100%;
            padding: 0.75rem 2.75rem 0.75rem 2.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            outline: none;
            transition: border-color 0.2s, box-shadow 0.2s;
            background-color: #ffffff;
            font-size: 1rem;
        }
        .search-input:focus {
            border-color: #111827;
            box-shadow: 0 0 0 3px rgba(17, 24, 39, 0.1);
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.75); /* Darker backdrop */
            z-index: 50;
            justify-content: center;
            align-items: center;
        }
        .modal.show { display: flex; }
        .modal-content {
            background: #111827; /* Black modal content area */
            border-radius: 8px;
            width: 90%;
            max-width: 800px;
            padding: 0.5rem; /* Padding to frame the iframe */
            position: relative;
        }
        .modal-iframe { width: 100%; height: 450px; border: none; border-radius: 6px; }
        .close-button {
            position: absolute;
            top: -1.25rem;
            right: -1.25rem;
            background: #ffffff;
            color: #1f2937;
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
            font-size: 1.25rem;
        }
        .close-button:hover {
            transform: scale(1.1);
        }
        .scroll-top-button {
            position: fixed;
            bottom: 1.5rem;
            right: 1.5rem;
            background: #111827;
            color: #ffffff;
            border: none;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            display: none;
            cursor: pointer;
            transition: opacity 0.3s ease, transform 0.2s ease;
            z-index: 30;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        .scroll-top-button.show {
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 1;
        }
        .scroll-top-button:hover {
            background: #374151;
            transform: scale(1.05);
        }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        .hamburger-menu { display: none; z-index: 41; }
        .hamburger-menu.open .hamburger-icon { display: none; }
        .hamburger-menu.open .close-icon { display: block; }
        .hamburger-menu .close-icon { display: none; }

        @media (max-width: 768px) {
            body { padding-top: 5rem; }
            .nav-items { display: none; position: absolute; top: 100%; left: 0; width: 100%; background: #ffffff; border-top: 1px solid #e5e7eb; flex-direction: column; align-items: stretch; padding: 1rem; gap: 0.5rem; opacity: 0; transform: translateY(-10px); transition: opacity 0.3s ease, transform 0.3s ease; }
            .nav-items.show { display: flex; opacity: 1; transform: translateY(0); }
            .hamburger-menu { display: block; z-index: 41; }
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="container flex justify-between items-center">
            <h1 class="text-2xl font-extrabold tracking-tighter text-gray-900">GOVOET</h1>
            <div class="flex items-center gap-1">
                <div class="hidden md:flex items-center gap-1" id="nav-items-desktop">
                    <button class="nav-tab active" data-tab="match">Match</button>
                    <button class="nav-tab" data-tab="livescore">Livescore</button>
                    <a href="https://saweria.co/justfutball" target="_blank" rel="noopener noreferrer" class="nav-tab">Donate</a>
                    <a href="https://govoettv.blogspot.com/" target="_blank" rel="noopener noreferrer" class="nav-tab">Alternative Link</a>
                </div>
                <button id="search-toggle" class="nav-icon-button" aria-label="Toggle Search">
                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
                </button>
                <button id="hamburger-toggle" class="hamburger-menu nav-icon-button md:hidden" aria-label="Toggle Menu">
                    <svg class="hamburger-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
                    <svg class="close-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
            </div>
        </div>
        <div class="nav-items md:hidden" id="nav-items">
            <button class="nav-tab dropdown-item active text-left w-full" data-tab="match">Match</button>
            <button class="nav-tab dropdown-item text-left w-full" data-tab="livescore">Livescore</button>
            <a href="https://saweria.co/justfutball" target="_blank" rel="noopener noreferrer" class="nav-tab dropdown-item text-left w-full">Donate</a>
            <a href="https://govoettv.blogspot.com/" target="_blank" rel="noopener noreferrer" class="nav-tab dropdown-item text-left w-full">Alternative Link</a>
        </div>
        <div class="search-container" id="search-container">
            <div class="max-w-2xl mx-auto">
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none"><svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg></div>
                    <input type="text" id="search-input" class="search-input" placeholder="Search for a team or league...">
                    <button id="clear-search-btn" class="absolute inset-y-0 right-0 pr-4 flex items-center cursor-pointer" style="display: none;"><svg class="h-5 w-5 text-gray-400 hover:text-gray-900 transition-colors" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        <div id="match-tab" class="tab-content active"><div id="schedule" class="space-y-2"></div></div>
        <div id="livescore-tab" class="tab-content"><script type="text/javascript" src="https://www.livescore.bz/api.livescore.0.1.js" api="livescore" async></script><a href="https://www.livescore.bz" sport="football(soccer)" data-1="today" lang="en">livescore football</a></div>
    </div>

    <!-- Modal & Scroll Button -->
    <div id="stream-modal" class="modal">
        <div class="modal-content">
            <button class="close-button">&times;</button>
            <iframe id="stream-iframe" class="modal-iframe" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen referrerpolicy="no-referrer"></iframe>
        </div>
    </div>
    <button id="scroll-top-button" class="scroll-top-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="19" x2="12" y2="5"></line><polyline points="5 12 12 5 19 12"></polyline></svg>
    </button>

    <script>
        // --- HELPER FUNCTIONS ---
        function stringToColor(str) { let hash = 0; for (let i = 0; i < str.length; i++) { hash = str.charCodeAt(i) + ((hash << 5) - hash); } let color = '#'; for (let i = 0; i < 3; i++) { const value = (hash >> (i * 8)) & 0xFF; color += ('00' + value.toString(16)).substr(-2); } return color; }
        
        function formatMatchDate(match) {
            const matchDateTime = new Date(`${match.kickoff_date}T${match.kickoff_time}:00+07:00`);
            const now = new Date();
            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const tomorrow = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
            const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
            const timeString = matchDateTime.toLocaleTimeString('en-GB', timeOptions);
            const matchDateOnly = new Date(matchDateTime.getFullYear(), matchDateTime.getMonth(), matchDateTime.getDate());

            if (matchDateOnly.getTime() === today.getTime()) return `Today, ${timeString}`;
            if (matchDateOnly.getTime() === tomorrow.getTime()) return `Tomorrow, ${timeString}`;
            
            const dateOptions = { day: 'numeric', month: 'short' };
            const dateString = matchDateTime.toLocaleDateString('en-US', dateOptions);
            return `${dateString}, ${timeString}`;
        }
        
        // --- CORE LOGIC ---
        async function fetchSchedule() { try { const response = await fetch('https://weekendsch.pages.dev/sch/schedule.json'); if (!response.ok) throw new Error('Network response was not ok'); return await response.json(); } catch (error) { console.error('Error fetching schedule:', error); return []; } }
        function isLiveMatch(match, currentTime) { if (match.match_date === 'live' && match.match_time === 'live') return true; if (!match.match_date || !match.match_time || !match.duration) return false; const matchDateTime = new Date(`${match.match_date}T${match.match_time}:00+07:00`); const durationHours = parseFloat(match.duration); const endTime = new Date(matchDateTime.getTime() + durationHours * 60 * 60 * 1000); return currentTime >= matchDateTime && currentTime <= endTime; }
        function isMatchExpired(match, currentTime) { if (match.match_date === 'live' || match.duration === 'live') return false; if (!match.match_date || !match.match_time || !match.duration) return true; const matchDateTime = new Date(`${match.match_date}T${match.match_time}:00+07:00`); const durationHours = parseFloat(match.duration); const endTime = new Date(matchDateTime.getTime() + durationHours * 60 * 60 * 1000); return currentTime > endTime; }
        function sortMatches(matches, currentTime) { return matches.sort((a, b) => { const isALive = isLiveMatch(a, currentTime); const isBLive = isLiveMatch(b, currentTime); if (isALive && !isBLive) return -1; if (!isALive && isBLive) return 1; const dateA = new Date(`${a.match_date}T${a.match_time}:00+07:00`); const dateB = new Date(`${b.match_date}T${b.match_time}:00+07:00`); return dateA - dateB; }); }
        function showModal(url) { document.getElementById('stream-iframe').src = url; document.getElementById('stream-modal').classList.add('show'); }
        function closeModal() { document.getElementById('stream-iframe').src = ''; document.getElementById('stream-modal').classList.remove('show'); }
        async function copyMatchUrl(matchId) { const url = `${window.location.origin}${window.location.pathname}?match=${encodeURIComponent(matchId)}`; const button = document.querySelector(`[data-match-id="${matchId.replace(/"/g, '\\"')}"]`); if (!button) return; const originalIcon = button.innerHTML; const checkIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#10B981" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>`; try { await navigator.clipboard.writeText(url); button.innerHTML = checkIcon; setTimeout(() => { button.innerHTML = originalIcon; }, 2000); } catch (error) { console.error('Failed to copy URL:', error); } }
        async function checkAutoPlay() { const urlParams = new URLSearchParams(window.location.search); const matchId = decodeURIComponent(urlParams.get('match') || ''); if (matchId) { const schedule = await fetchSchedule(); const match = schedule.find(m => m.id === matchId); if (match && match.servers && match.servers.length > 0 && !isMatchExpired(match, new Date())) { showModal(match.servers[0].url); } } }
        function filterMatches(matches, searchTerm) { if (!searchTerm) return matches; const lowerTerm = searchTerm.toLowerCase(); return matches.filter(match => match.team1.name.toLowerCase().includes(lowerTerm) || match.team2.name.toLowerCase().includes(lowerTerm) || match.league.toLowerCase().includes(lowerTerm)); }
        
        // --- RENDER FUNCTION ---
        async function renderSchedule(searchTerm = '') {
            const scheduleDiv = document.getElementById('schedule');
            let skeletonHTML = '';
            for (let i = 0; i < 4; i++) { skeletonHTML += `<div class="skeleton-card space-y-4"><div class="flex justify-between items-center"><div class="skeleton-line w-1/4 h-4"></div><div class="skeleton-line w-1/3 h-4"></div></div><div class="skeleton-line w-full h-8 mt-4"></div><div class="skeleton-line w-2/3 h-8"></div></div>`; }
            scheduleDiv.innerHTML = skeletonHTML;
            
            const schedule = await fetchSchedule();
            const currentTime = new Date();
            const filteredSchedule = schedule.filter(match => !isMatchExpired(match, currentTime));
            const sortedSchedule = sortMatches(filteredSchedule, currentTime);
            const searchedSchedule = filterMatches(sortedSchedule, searchTerm);
            
            scheduleDiv.innerHTML = '';

            if (searchedSchedule.length === 0) { scheduleDiv.innerHTML = '<div class="text-center py-16"><h3 class="font-semibold text-gray-800">No Matches Found</h3><p class="text-sm text-gray-500">There are no matches scheduled that fit your search.</p></div>'; return; }

            searchedSchedule.forEach(match => {
                const isLive = isLiveMatch(match, currentTime);
                const matchElement = document.createElement('div');
                matchElement.className = 'match-card';
                
                matchElement.innerHTML = `
                    <div class="match-card-header flex justify-between items-center p-4">
                        <p class="text-xs font-semibold text-gray-500 uppercase tracking-wider">${match.league}</p>
                        <div class="flex items-center gap-4">
                            ${isLive ? '<span class="live-badge">LIVE</span>' : `<p class="text-sm font-medium text-gray-600">${formatMatchDate(match)}</p>`}
                            <button class="copy-button" data-match-id="${match.id}" onclick="event.stopPropagation(); copyMatchUrl('${match.id.replace(/'/g, "\\'")}')" title="Copy Match Link">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
                            </button>
                        </div>
                    </div>
                    <div class="match-card-body">
                        <div class="flex items-center gap-3"><div class="team-indicator" style="background-color: ${stringToColor(match.team1.name)}"></div><h2 class="text-xl font-bold text-gray-900">${match.team1.name}</h2></div>
                        <div class="flex items-center gap-3 mt-3"><div class="team-indicator" style="background-color: ${stringToColor(match.team2.name)}"></div><h2 class="text-xl font-bold text-gray-900">${match.team2.name}</h2></div>
                    </div>
                    <div class="servers-container">
                        <div><div class="bg-gray-50 p-4 border-t border-gray-100"><div class="flex flex-wrap gap-2">
                        ${match.servers && match.servers.length > 0 ? match.servers.map(server => `<button class="stream-button text-sm px-3 py-1.5 rounded-lg" onclick="event.stopPropagation(); showModal('${server.url}')">${server.label}</button>`).join('') : '<p class="no-streams text-sm">No streams available.</p>'}
                        </div></div></div>
                    </div>
                `;
                
                matchElement.addEventListener('click', () => { matchElement.querySelector('.servers-container').classList.toggle('show'); });
                scheduleDiv.appendChild(matchElement);
            });
        }

        // --- EVENT LISTENERS & INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('search-input');
            const clearSearchBtn = document.getElementById('clear-search-btn');

            function showTab(tabId) { document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active')); document.querySelectorAll('.nav-tab').forEach(tab => { if (tab.dataset.tab === tabId) tab.classList.add('active'); else tab.classList.remove('active'); }); document.getElementById(`${tabId}-tab`).classList.add('active'); if (tabId === 'match') { renderSchedule(searchInput.value); } }
            document.querySelectorAll('.nav-tab').forEach(tab => { if(tab.dataset.tab) { tab.addEventListener('click', () => { showTab(tab.dataset.tab); const mobileNav = document.getElementById('nav-items'); if (mobileNav) mobileNav.classList.remove('show'); const hamburger = document.getElementById('hamburger-toggle'); if (hamburger) hamburger.classList.remove('open'); }); } });
            document.getElementById('search-toggle').addEventListener('click', (e) => { e.stopPropagation(); if (!document.querySelector('[data-tab="match"]').classList.contains('active')) { showTab('match'); } const sc = document.getElementById('search-container'); sc.classList.toggle('show'); if (sc.classList.contains('show')) searchInput.focus(); });
            document.getElementById('hamburger-toggle').addEventListener('click', (e) => { e.stopPropagation(); document.getElementById('nav-items').classList.toggle('show'); document.getElementById('hamburger-toggle').classList.toggle('open'); });
            document.addEventListener('click', (e) => { const ni = document.getElementById('nav-items'); const ht = document.getElementById('hamburger-toggle'); if (ni && ht && !ni.contains(e.target) && !ht.contains(e.target)) { ni.classList.remove('show'); ht.classList.remove('open'); } const sc = document.getElementById('search-container'); const st = document.getElementById('search-toggle'); if (sc && st && !sc.contains(e.target) && !st.contains(e.target)) { sc.classList.remove('show'); } });
            
            searchInput.addEventListener('input', (e) => { const searchTerm = e.target.value; renderSchedule(searchTerm); clearSearchBtn.style.display = searchTerm ? 'flex' : 'none'; });
            clearSearchBtn.addEventListener('click', () => { searchInput.value = ''; renderSchedule(''); clearSearchBtn.style.display = 'none'; searchInput.focus(); });

            document.getElementById('scroll-top-button').addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));
            window.addEventListener('scroll', () => { if (window.scrollY > 300) document.getElementById('scroll-top-button').classList.add('show'); else document.getElementById('scroll-top-button').classList.remove('show'); });
            document.querySelector('.close-button').addEventListener('click', closeModal);

            Promise.all([renderSchedule(), checkAutoPlay()]);
            setInterval(() => { if (document.querySelector('.nav-tab[data-tab="match"]').classList.contains('active')) { renderSchedule(searchInput.value); } }, 60000);
        });
    </script>
</body>
</html>