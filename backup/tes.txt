<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GOVOET</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* --- GLOBAL STYLES --- */
        body { font-family: 'Inter', sans-serif; background: #f9fafb; color: #1f2937; min-height: 100vh; margin: 0; padding: 0; padding-top: 5rem; }
        .container { max-width: 1000px; margin: 0 auto; padding: 1.5rem; }

        /* --- MATCH CARD STYLES (REFINED) --- */
        .match-card { background: #ffffff; border: 1px solid #e5e7eb; border-radius: 12px; transition: all 0.2s ease-in-out; cursor: pointer; position: relative; }
        .match-card:hover { transform: translateY(-4px); box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08); }
        .live-badge { background-color: #ef4444; color: white; padding: 2px 8px; border-radius: 9999px; font-size: 0.75rem; font-weight: 600; animation: pulse 1.8s infinite cubic-bezier(0.4, 0, 0.6, 1); }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.8; } }
        .stream-button { background: #1f2937; color: #ffffff; transition: background 0.2s ease; }
        .stream-button:hover { background: #374151; }
        .no-streams { color: #6b7280; font-style: italic; }
        .servers-container { display: block; max-height: 0; opacity: 0; overflow: hidden; transition: max-height 0.3s ease-out, opacity 0.3s ease-out, padding 0.3s ease-out; padding: 0 1rem; }
        .servers-container.show { max-height: 200px; opacity: 1; padding: 0.75rem 1rem; }
        .copy-button { background: transparent; color: #6b7280; border: none; border-radius: 6px; padding: 0.25rem; cursor: pointer; transition: color 0.2s ease, background-color 0.2s ease; }
        .copy-button:hover { background-color: #f3f4f6; color: #1f2937; }
        .copy-button.copied::after { content: 'Tersalin!'; position: absolute; top: -2rem; right: 0; background: #1f2937; color: #ffffff; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.75rem; }

        /* --- NAVBAR STYLES --- */
        .navbar { position: fixed; top: 0; width: 100%; background: rgba(255, 255, 255, 0.8); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); border-bottom: 1px solid #e5e7eb; z-index: 40; padding: 0; min-height: 5rem; display: flex; align-items: center; }
        .navbar .container { padding-top: 0; padding-bottom: 0; }
        .nav-tab { display: inline-block; padding: 0.5rem 1rem; cursor: pointer; transition: all 0.2s ease; border-radius: 6px; font-weight: 500; border: none; background: transparent; text-decoration: none; color: #1f2937; }
        .nav-tab.active { background: #1f2937; color: #ffffff; }
        .nav-tab:not(.active):hover { background: #f3f4f6; color: #111827; }

        /* --- SEARCH STYLES (IMPROVED) --- */
        .search-container {
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            background: #ffffff;
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
            z-index: 38;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: opacity 0.3s ease, transform 0.3s ease, visibility 0.3s ease;
        }
        .search-container.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }
        .search-input {
            width: 100%;
            padding: 0.75rem 2.5rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            outline: none;
            transition: border-color 0.2s, box-shadow 0.2s;
            background-color: #f9fafb;
        }
        .search-input:focus {
            border-color: #1f2937;
            box-shadow: 0 0 0 3px rgba(31, 41, 55, 0.1);
            background-color: #ffffff;
        }
        .search-input::placeholder {
            color: #9ca3af;
        }

        /* --- MODAL, SCROLL BUTTON, TABS --- */
        .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 50; justify-content: center; align-items: center; }
        .modal.show { display: flex; }
        .modal-content { background: #ffffff; border-radius: 8px; width: 90%; max-width: 800px; padding: 1rem; position: relative; }
        .modal-iframe { width: 100%; height: 450px; border: none; }
        .close-button { position: absolute; top: 0.5rem; right: 0.5rem; background: #1f2937; color: #ffffff; border: none; border-radius: 4px; padding: 0.5rem 1rem; cursor: pointer; transition: background 0.2s ease; }
        .close-button:hover { background: #374151; }
        .scroll-top-button { position: fixed; bottom: 1.5rem; right: 1.5rem; background: #1f2937; color: #ffffff; border: none; border-radius: 50%; width: 40px; height: 40px; display: none; cursor: pointer; transition: opacity 0.3s ease; z-index: 30; }
        .scroll-top-button.show { display: flex; align-items: center; justify-content: center; opacity: 1; }
        .scroll-top-button:hover { background: #374151; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        .hamburger-menu { display: none; z-index: 41; }
        .hamburger-menu.open .hamburger-icon { display: none; }
        .hamburger-menu.open .close-icon { display: block; }
        .hamburger-menu .close-icon { display: none; }
        
        @media (max-width: 768px) {
            .nav-items { display: none; position: absolute; top: 100%; left: 0; width: 100%; background: #ffffff; border-top: 1px solid #e5e7eb; flex-direction: column; align-items: stretch; padding: 1rem; gap: 0.5rem; opacity: 0; transform: translateY(-10px); transition: opacity 0.3s ease, transform 0.3s ease; }
            .nav-items.show { display: flex; opacity: 1; transform: translateY(0); }
            .hamburger-menu, .search-toggle { display: block; z-index: 41; }
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center">
    <!-- Navbar -->
    <nav class="navbar">
        <div class="container flex justify-between items-center">
            <h1 class="text-2xl font-bold tracking-tight">GOVOET</h1>
            <div class="flex items-center gap-2">
                <div class="hidden md:flex items-center gap-2" id="nav-items-desktop">
                    <button class="nav-tab active" data-tab="match">Match</button>
                    <button class="nav-tab" data-tab="livescore">Livescore</button>
                    <a href="https://saweria.co/justfutball" target="_blank" rel="noopener noreferrer" class="nav-tab inline-block text-center">Donate</a>
                    <a href="https://govoettv.blogspot.com/" target="_blank" rel="noopener noreferrer" class="nav-tab inline-block text-center">Alternative Link</a>
                </div>
                <button id="search-toggle" class="search-toggle p-2 rounded-full hover:bg-gray-200 transition-colors" aria-label="Buka/Tutup Pencarian"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg></button>
                <button id="hamburger-toggle" class="hamburger-menu p-2 rounded-full hover:bg-gray-200 transition-colors md:hidden" aria-label="Buka/Tutup Menu"><svg class="hamburger-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6h18M3 12h18M3 18h18"/></svg><svg class="close-icon hidden" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 6L6 18M6 6l12 12"/></svg></button>
            </div>
        </div>
        <div class="nav-items md:hidden" id="nav-items">
            <button class="nav-tab dropdown-item active" data-tab="match">Match</button>
            <button class="nav-tab dropdown-item" data-tab="livescore">Livescore</button>
            <a href="https://saweria.co/justfutball" target="_blank" rel="noopener noreferrer" class="nav-tab dropdown-item text-center w-full">Donate</a>
            <a href="https://govoettv.blogspot.com/" target="_blank" rel="noopener noreferrer" class="nav-tab dropdown-item text-center w-full">Alternative Link</a>
        </div>
        <!-- Search Container (IMPROVED) -->
        <div class="search-container" id="search-container">
            <div class="max-w-4xl mx-auto px-6">
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
                    </div>
                    <input type="text" id="search-input" class="search-input" placeholder="Cari tim atau liga...">
                    <button id="clear-search-btn" class="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer" style="display: none;">
                        <svg class="h-5 w-5 text-gray-400 hover:text-gray-600 transition-colors" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        <div id="match-tab" class="tab-content active"><div id="schedule" class="space-y-3"></div></div>
        <div id="livescore-tab" class="tab-content"><script type="text/javascript" src="https://www.livescore.bz/api.livescore.0.1.js" api="livescore" async></script><a href="https://www.livescore.bz" sport="football(soccer)" data-1="today" lang="en">recent matches</a></div>
    </div>

    <!-- Modal & Scroll Button -->
    <div id="stream-modal" class="modal"><div class="modal-content"><button class="close-button">X</button><iframe allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share' allowfullscreen='' frameborder='0' referrerpolicy='no-referrer' id="stream-iframe" class="modal-iframe"></iframe></div></div>
    <button id="scroll-top-button" class="scroll-top-button"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="19" x2="12" y2="5"></line><polyline points="5 12 12 5 19 12"></polyline></svg></button>

    <script>
        // --- CORE FUNCTIONS (No Changes) ---
        async function fetchSchedule() { try { const response = await fetch('https://weekendsch.pages.dev/sch/schedule.json'); if (!response.ok) throw new Error('Network response was not ok'); return await response.json(); } catch (error) { console.error('Error fetching schedule:', error); return []; } }
        function isLiveMatch(match, currentTime) { if (match.match_date === 'live' && match.match_time === 'live') return true; if (!match.match_date || !match.match_time || !match.duration) return false; const matchDateTime = new Date(`${match.match_date}T${match.match_time}:00+07:00`); const durationHours = parseFloat(match.duration); const endTime = new Date(matchDateTime.getTime() + durationHours * 60 * 60 * 1000); return currentTime >= matchDateTime && currentTime <= endTime; }
        function isMatchExpired(match, currentTime) { if (match.match_date === 'live' || match.duration === 'live') return false; if (!match.match_date || !match.match_time || !match.duration) return true; const matchDateTime = new Date(`${match.match_date}T${match.match_time}:00+07:00`); const durationHours = parseFloat(match.duration); const endTime = new Date(matchDateTime.getTime() + durationHours * 60 * 60 * 1000); return currentTime > endTime; }
        function sortMatches(matches, currentTime) { return matches.sort((a, b) => { const isALive = isLiveMatch(a, currentTime); const isBLive = isLiveMatch(b, currentTime); if (isALive && !isBLive) return -1; if (!isALive && isBLive) return 1; const dateA = new Date(`${a.match_date}T${a.match_time}:00+07:00`); const dateB = new Date(`${b.match_date}T${b.match_time}:00+07:00`); return dateA - dateB; }); }
        function showModal(url) { const modal = document.getElementById('stream-modal'); const iframe = document.getElementById('stream-iframe'); iframe.src = url; modal.classList.add('show'); }
        function closeModal() { const modal = document.getElementById('stream-modal'); const iframe = document.getElementById('stream-iframe'); iframe.src = ''; modal.classList.remove('show'); }
        async function copyMatchUrl(matchId) { const url = `${window.location.origin}${window.location.pathname}?match=${encodeURIComponent(matchId)}`; try { await navigator.clipboard.writeText(url); const button = document.querySelector(`[data-match-id="${matchId.replace(/"/g, '\\"')}"]`); button.classList.add('copied'); setTimeout(() => button.classList.remove('copied'), 2000); } catch (error) { console.error('Failed to copy URL:', error); } }
        async function checkAutoPlay() { const urlParams = new URLSearchParams(window.location.search); const matchId = decodeURIComponent(urlParams.get('match') || ''); if (matchId) { const schedule = await fetchSchedule(); const match = schedule.find(m => m.id === matchId); if (match && match.servers && match.servers.length > 0 && !isMatchExpired(match, new Date())) { showModal(match.servers[0].url); } } }
        function filterMatches(matches, searchTerm) { if (!searchTerm) return matches; const lowerTerm = searchTerm.toLowerCase(); return matches.filter(match => match.team1.name.toLowerCase().includes(lowerTerm) || match.team2.name.toLowerCase().includes(lowerTerm) || match.league.toLowerCase().includes(lowerTerm)); }
        
        // --- HELPER FUNCTION for Date Formatting ---
        function getFormattedDateTime(match) {
            const matchDateTime = new Date(`${match.kickoff_date}T${match.kickoff_time}:00+07:00`);
            const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
            const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: userTimeZone };
            const dateOptions = { day: '2-digit', month: 'short', year: 'numeric', timeZone: userTimeZone };
            const localTime = matchDateTime.toLocaleString('id-ID', timeOptions).replace('.', ':');
            const localDate = matchDateTime.toLocaleString('id-ID', dateOptions);
            return `${localTime} | ${localDate}`;
        }

        // --- RENDER FUNCTION (REFINED FOR PROFESSIONAL LOOK) ---
        async function renderSchedule(searchTerm = '') {
            const scheduleDiv = document.getElementById('schedule');
            scheduleDiv.innerHTML = '<p class="text-center text-gray-500">Memuat jadwal...</p>';
            
            const schedule = await fetchSchedule();
            const currentTime = new Date();
            const filteredSchedule = schedule.filter(match => !isMatchExpired(match, currentTime));
            const sortedSchedule = sortMatches(filteredSchedule, currentTime);
            const searchedSchedule = filterMatches(sortedSchedule, searchTerm);
            
            scheduleDiv.innerHTML = '';

            if (searchedSchedule.length === 0) {
                scheduleDiv.innerHTML = '<p class="text-center text-gray-600 text-sm">Tidak ada pertandingan yang cocok.</p>';
                return;
            }

            searchedSchedule.forEach(match => {
                const isLive = isLiveMatch(match, currentTime);
                const formattedDateTime = getFormattedDateTime(match);
                const matchElement = document.createElement('div');
                matchElement.className = 'match-card'; 
                
                const matchInfo = `
                    <div class="p-4">
                        <div class="flex justify-between items-center mb-2">
                            ${isLive 
                                ? '<span class="live-badge">LIVE</span>' 
                                : `<p class="text-sm font-medium text-gray-600">${formattedDateTime}</p>`
                            }
                            <button class="copy-button" data-match-id="${match.id}" onclick="event.stopPropagation(); copyMatchUrl('${match.id.replace(/'/g, "\\'")}')" title="Salin Link Pertandingan">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M8 17.929H6.116a2.116 2.116 0 0 1-2.116-2.115V4.116A2.116 2.116 0 0 1 6.116 2h9.769a2.116 2.116 0 0 1 2.115 2.116v1.793m-1.058 11.919H17.884a2.116 2.116 0 0 0 2.116-2.115V8.116A2.116 2.116 0 0 0 17.884 6h-9.77a2.116 2.116 0 0 0-2.115 2.116v9.768a2.116 2.116 0 0 0 2.115 2.115Z"/></svg>
                            </button>
                        </div>
                        <div>
                            <p class="text-xs font-semibold text-gray-400 uppercase tracking-wider">${match.league}</p>
                            <h2 class="text-lg font-bold text-gray-800">${match.team1.name} vs ${match.team2.name}</h2>
                        </div>
                    </div>
                    <div class="servers-container bg-gray-50 border-t border-gray-100">
                        <div class="flex flex-wrap gap-2">
                            ${match.servers && match.servers.length > 0 ? match.servers.map(server => `
                                <button class="stream-button text-xs font-medium px-2.5 py-1 rounded" onclick="event.stopPropagation(); showModal('${server.url}')">${server.label}</button>
                            `).join('') : '<p class="no-streams text-xs">Tidak ada streaming tersedia</p>'}
                        </div>
                    </div>
                `;
                matchElement.innerHTML = matchInfo;
                
                matchElement.addEventListener('click', () => {
                    const serversContainer = matchElement.querySelector('.servers-container');
                    serversContainer.classList.toggle('show');
                });
                scheduleDiv.appendChild(matchElement);
            });
            document.querySelector('.close-button').addEventListener('click', closeModal);
        }

        // --- EVENT LISTENERS & INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('search-input');
            const clearSearchBtn = document.getElementById('clear-search-btn');

            function showTab(tabId) { document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active')); document.querySelectorAll('.nav-tab').forEach(tab => { if (tab.dataset.tab === tabId) tab.classList.add('active'); else tab.classList.remove('active'); }); document.getElementById(`${tabId}-tab`).classList.add('active'); if (tabId === 'match') { renderSchedule(searchInput.value); } }
            document.querySelectorAll('.nav-tab').forEach(tab => { if(tab.dataset.tab) { tab.addEventListener('click', () => { showTab(tab.dataset.tab); document.getElementById('nav-items').classList.remove('show'); document.getElementById('hamburger-toggle').classList.remove('open'); }); } });
            document.getElementById('search-toggle').addEventListener('click', (e) => { e.stopPropagation(); if (!document.querySelector('[data-tab="match"]').classList.contains('active')) { showTab('match'); } const sc = document.getElementById('search-container'); sc.classList.toggle('show'); if (sc.classList.contains('show')) searchInput.focus(); });
            document.getElementById('hamburger-toggle').addEventListener('click', (e) => { e.stopPropagation(); document.getElementById('nav-items').classList.toggle('show'); document.getElementById('hamburger-toggle').classList.toggle('open'); });
            document.addEventListener('click', (e) => { const ni = document.getElementById('nav-items'); const ht = document.getElementById('hamburger-toggle'); if (!ni.contains(e.target) && !ht.contains(e.target)) { ni.classList.remove('show'); ht.classList.remove('open'); } const sc = document.getElementById('search-container'); const st = document.getElementById('search-toggle'); if (!sc.contains(e.target) && !st.contains(e.target)) { sc.classList.remove('show'); } });
            
            // IMPROVED SEARCH EVENT HANDLING
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value;
                renderSchedule(searchTerm);
                clearSearchBtn.style.display = searchTerm ? 'flex' : 'none';
            });
            clearSearchBtn.addEventListener('click', () => {
                searchInput.value = '';
                renderSchedule('');
                clearSearchBtn.style.display = 'none';
                searchInput.focus();
            });

            document.getElementById('scroll-top-button').addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));
            window.addEventListener('scroll', () => { if (window.scrollY > 300) document.getElementById('scroll-top-button').classList.add('show'); else document.getElementById('scroll-top-button').classList.remove('show'); });

            Promise.all([renderSchedule(), checkAutoPlay()]);
            setInterval(() => { if (document.querySelector('.nav-tab[data-tab="match"]').classList.contains('active')) { renderSchedule(searchInput.value); } }, 60000);
        });
    </script>
</body>
</html>